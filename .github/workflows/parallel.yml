name: Run Cypress Tests using Docker in Parallel
# run workflow on git push and git pull
on: [push, pull_request]
jobs:
  test:
    name: Cypress run
    # OS
    runs-on: ubuntu-latest
    # Cypress Docker image with Chrome v99 and Firefox v98 pre-installed
    container: cypress/browsers:node17.8.0-chrome99-ff97-slim
    strategy:
      # when one test fails, DO NOT cancel the other containers, because this will kill Cypress processes leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # split tests across three containers in parallel
        containers: [1, 2, 3]
    steps:
      - name: Checkout
        # checks-out your repository so your workflow can access it
        uses: actions/checkout@v2
      # because of "record" and "parallel" parameters these containers will load balance all found tests among themselves
      - name: Cypress run
        # GitHub Action for running Cypress end-to-end tests
        uses: cypress-io/github-action@v2
        with:
          record: true
          parallel: true
          group: 'Actions example'
          tag: parallelDocker
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly determine the unique run id necessary to re-run the checks (generates dynamically)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # - if the event is push, the title will be undefined and Cypress will get the commit message from Git information
          # - if the event is pull_request, then we set the commit message to the pull request title
          COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title }}
          # allow status checks to remain when getting commit info message
          COMMIT_INFO_SHA: ${{ github.event.pull_request.head.sha }}
          # check machine resources
          DEBUG: 'cypress:server:util:process_profiler'